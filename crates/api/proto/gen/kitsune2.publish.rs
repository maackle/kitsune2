// This file is @generated by prost-build.
/// A publish ops message.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PublishOps {
    /// Op ids.
    #[prost(bytes = "bytes", repeated, tag = "1")]
    pub op_ids: ::prost::alloc::vec::Vec<::prost::bytes::Bytes>,
}
/// A publish agent message.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct PublishAgent {
    /// Agent info.
    #[prost(string, tag = "1")]
    pub agent_info: ::prost::alloc::string::String,
}
/// Publish message.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct K2PublishMessage {
    /// Message type.
    #[prost(enumeration = "k2_publish_message::PublishMessageType", tag = "1")]
    pub publish_message_type: i32,
    /// Message.
    #[prost(bytes = "bytes", tag = "2")]
    pub data: ::prost::bytes::Bytes,
}
/// Nested message and enum types in `K2PublishMessage`.
pub mod k2_publish_message {
    /// Publish message type.
    ///
    /// This enum is used to indicate the content of `data`.
    /// So, OPS -> PublishOps and AGENT -> PublishAgent.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum PublishMessageType {
        /// Default value.
        Unspecified = 0,
        /// An Ops publish message.
        Ops = 1,
        /// An agent publish message.
        Agent = 2,
    }
    impl PublishMessageType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "UNSPECIFIED",
                Self::Ops => "OPS",
                Self::Agent => "AGENT",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSPECIFIED" => Some(Self::Unspecified),
                "OPS" => Some(Self::Ops),
                "AGENT" => Some(Self::Agent),
                _ => None,
            }
        }
    }
}
