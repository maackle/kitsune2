// This file is @generated by prost-build.
/// A Kitsune2 wire protocol message.
///
/// This is the top-level encoding
/// that will be transferred between Kitsune2 peers. Most communications
/// between peers to make Kitsune2 actually function will be encoded
/// separately inside the payload of TY_MODULE type messages.
#[derive(Clone, PartialEq, Eq, Hash, ::prost::Message)]
pub struct K2Proto {
    /// The type of this message.
    #[prost(enumeration = "k2_proto::K2WireType", tag = "1")]
    pub ty: i32,
    /// The payload or content of this message.
    #[prost(bytes = "bytes", tag = "2")]
    pub data: ::prost::bytes::Bytes,
    /// If the Ty requires that a space be specified, this is it.
    ///
    /// Kitsune is divided up into multiple dht "spaces" and peers
    /// join and communicate over these spaces. These bytes identify
    /// the space within which this message is communicating.
    #[prost(bytes = "bytes", optional, tag = "3")]
    pub space_id: ::core::option::Option<::prost::bytes::Bytes>,
    /// If the Ty requires a module impl be specified, this is it.
    ///
    /// Modules include specific sub-protocols to communicate with each other,
    /// so those messages must be routed to the correct module.
    ///
    /// This string is the module routing info. E.g. "gossip", "fetch", "sharding".
    #[prost(string, optional, tag = "4")]
    pub module_id: ::core::option::Option<::prost::alloc::string::String>,
}
/// Nested message and enum types in `K2Proto`.
pub mod k2_proto {
    /// Enumeration of the types of messages that can be sent between peers.
    ///
    /// We are using this enum field to distinguish between top-level messages,
    /// rather than protobuf's oneof because of the downsides of upgrading oneofs.
    #[derive(
        Clone,
        Copy,
        Debug,
        PartialEq,
        Eq,
        Hash,
        PartialOrd,
        Ord,
        ::prost::Enumeration
    )]
    #[repr(i32)]
    pub enum K2WireType {
        /// The "UNSPECIFIED" type for future message types.
        ///
        /// In general, peers should ignore unspecified messages, but
        /// should still count them toward any ratelimiting metrics.
        Unspecified = 0,
        /// This message is preflight data.
        ///
        /// The implementor is responsible for encoding any module-specific
        /// requirements within the data payload of this message type.
        /// For example, if peers are required to include the "dht_v1" module
        /// to communicate with each other, they should reject preflight to
        /// peers that do not include that module.
        Preflight = 1,
        /// This is a notification or fire-and-forget message from a peer.
        ///
        /// This type requires that a "space_id" be specified.
        Notify = 2,
        /// This is a module communication.
        ///
        /// Most of Kitsune2's communications will likely proceed between
        /// Kitsune2's modules.
        ///
        /// This type requires that a "space_id" be specified.
        /// This type requires that a "module_id" be specified.
        Module = 3,
        /// This message indicates a general disconnect, with the reason
        /// or context specified in the data payload.
        ///
        /// We may add additional specific disconnect codes in the future.
        Disconnect = 15,
    }
    impl K2WireType {
        /// String value of the enum field names used in the ProtoBuf definition.
        ///
        /// The values are not transformed in any way and thus are considered stable
        /// (if the ProtoBuf definition does not change) and safe for programmatic use.
        pub fn as_str_name(&self) -> &'static str {
            match self {
                Self::Unspecified => "UNSPECIFIED",
                Self::Preflight => "PREFLIGHT",
                Self::Notify => "NOTIFY",
                Self::Module => "MODULE",
                Self::Disconnect => "DISCONNECT",
            }
        }
        /// Creates an enum from field names used in the ProtoBuf definition.
        pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
            match value {
                "UNSPECIFIED" => Some(Self::Unspecified),
                "PREFLIGHT" => Some(Self::Preflight),
                "NOTIFY" => Some(Self::Notify),
                "MODULE" => Some(Self::Module),
                "DISCONNECT" => Some(Self::Disconnect),
                _ => None,
            }
        }
    }
}
